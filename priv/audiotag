# palette

EFD9CE
DEC0F1
CB9CF2
957FEF

7161EF




<div class="timestamp"><%= "{:erlang.timestamp}" %><%= Tuple.to_list(:erlang.timestamp) |> Enum.map(fn each -> Integer.to_string(each) end) %></div>





# Description
Let it glitch.



:glitch ==
  [:the, :tempreature]
  |> %TheSystem{}
  |>


(a temporary feature
or temporary creature)


_____________________________________________________
# binaural BEAM

defmodule Pipesine.Example do
    @moduledoc """
        software for writing music in pure Elixir
        alt + P to stop/perform
        if desired, set scale on the first line.
            options = {
                22_edo,
                bohlen_pierce,
                sa_murcchana,
                tonality_diamond,
                just_intonation,
                pentatonic
            }
            default =
                superpyth
        sound is stereo. use headphones
        may contain high frequencies. exercise caution
        spend time exploring small changes!
    """

    def a_pipesine do
        # do something here, or start fresh
    end
end
________________________________________________________________
# a pipesine

defmodule Pipesine.Example do
    @moduledoc """
        software for writing music in pure Elixir
        alt + P to stop/perform
        if desired, set scale on the first line.
            options: 22_edo; bohlen_pierce; sa_murcchana; tonality_diamond; just_intonation; pentatonic
            default: superpyth
        sound is stereo. use headphones
        may contain high frequencies. exercise caution
        spend time exploring small changes
    """

    def piping_test do
        test_it =
            {:ok, binary} = File.read!("my_code")
            :erlang.binary_to_term(binary)
            |> String.contains?("16/15 vibes")

        if test_it do
          File.rename!("my_score")
        else
            IO.puts("type more closely")
        end
    end
end
_____________________________________________________
# example pipesines paradigm

defmodule APipeASine do
    @moduledoc """
        software for writing music in pure Elixir
        alt + P to stop/perform
        sound is stereo. use headphones
        may contain high frequencies. exercise caution
        spend time exploring small changes
    """

    def test do
        {:ok, binary} = File.read!("my_code")
        :erlang.binary_to_term(binary)
        |> String.contains?("435 hz vibrations")
    end

    def heard do
        cond do
            test() === :true ->
                :erlang.binary_to_term(binary)
                |> File.rename!("my_score")
            true ->
                IO.puts("type more closely")
                |> Enum.count()
                |> Enum.reduce()
        end
    end
end

__________________________________________________________
# test project

defmodule Pipesines.paradigm do
    def first_pass do
        {:ok, binary} = File.read!("my_code")
        :erlang.binary_to_term(binary)
        |> String.contains?("music => 1")
        |> String.to_binary()
        |> File.rename!("my_score")
    end
end

___________________________________________________________


ROOT
        <hr class="titleright" style="width:75%;margin-top:5px">

INDEX dump

<%= if @live_action in [:new, :edit] do %>
  <.modal return_to={Routes.composition_index_path(@socket, :index)}>
    <.live_component
      module={PipesineWeb.CompositionLive.FormComponent}
      id={@composition.id || :new}
      title={@page_title}
      action={@live_action}
      composition={@composition}
      return_to={Routes.composition_index_path(@socket, :index)}
    />
  </.modal>
<% end %>

<table class="dotgothic16">
  <thead>
    <tr>
      <th>score</th>
      <th>username</th>
      <th>actions</th>
      <th></th>
    </tr>
  </thead>
  <tbody id="compositions">
    <%= for composition <- @compositions do %>
      <tr id={"composition-#{composition.id}"}>
        <td><%= composition.score %></td>
        <td><%= composition.composer.username %></td>

        <td>
          <span><%= live_redirect "show", to: Routes.composition_show_path(@socket, :show, composition) %></span>
          <span><%= live_patch "edit", to: Routes.composition_index_path(@socket, :edit, composition) %></span>
          <span><%= link "delete", to: "#", phx_click: "delete", phx_value_id: composition.id, data: [confirm: "Are you sure?"] %></span>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<span><%= live_redirect "back", to: Routes.pipesine_path(@socket, :index), class: "button" %></span>
<span><%= live_patch "new composition", to: Routes.composition_index_path(@socket, :new), class: "button"  %></span>

——————————————————————————————————————————————————————————
COMPONEENT

defmodule PipesineWeb.CompositionLive.CompositionComponent do
  use PipesineWeb, :live_component

  def render(assigns) do
    ~H"""
    <div id="" class="composition">
      <div class="row">
        <div class="column column-10">
          <div class="composer-avatar"></div>
        </div>
        <div class="column column-90 composition-score dotgothic16">
          <b><%= @composition.username %></b>
          <br/>
          <%= @composition.score %>
          <br><br>
        </div>
      </div>

      <div class="row">
        <div class="column">
          <i class="far fa-heart"></i>
        </div>
        <div class="column">
          <%= live_redirect "show", to: Routes.composition_show_path(@socket, :show, composition) %>
            <i class="far fa-edit"></i>
          <% end %>
          <%= link "delete", to: "#", phx_click: "delete", phx_value_id: composition.id, data: [confirm: "Are you sure?"] %>
            <i class="far fa-trash-alt"></i>
          <% end %>
        </div>
      </div>
    </div>
    """
  end
end




MODAL


 <.modal>
      <.live_component id={assigns[:current_composer].composer_id} module={PipesineWeb.CompositionLive.InstructionsComponent}/>
    </.modal>
